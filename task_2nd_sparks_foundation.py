# -*- coding: utf-8 -*-
"""task 2nd sparks foundation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FEC2qU0DeYZoXoHwHBUwz9IdZGVIkQrL

GRIP: The Sparks Foundation-MAY 2023

Author: Omkar Dinesh Patil

Task : Predection using Unsupervised Machine Learning
"""

# improting the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style='darkgrid')
sns.set(rc={'figure.figsize':(11.7,8.27)})
import warnings 
warnings.filterwarnings("ignore")

from google.colab import files
uploaded = files.upload()

data= pd.read_csv('Data II.csv')
data.drop(['Id','Species'],axis=1,inplace=True)
print(data.head(7))
print(data.shape)

#checking whether the Dataset contains missing values of not

data.isna().sum()

# Summery of the Dataset

data.describe()

# finding the optimum number of clusters for k-means classification

x = data.iloc[:,[0,1,2,3]].values

from sklearn.cluster import KMeans
inertia = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++',
                 max_iter = 300, n_init = 10, random_state= 0)
    kmeans.fit(x)
    inertia.append(kmeans.inertia_)
print(inertia)
    #plotting the results onto aa line graph,
    # allowing us to observe The below
plt.title('The Elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

#Applying kmeans to the dataset/ Creating the kmeans classifier
kmeans=KMeans(n_clusters=3, init= 'k-means++',
              max_iter= 300, n_init=10, random_state =0)
y_kmeans = kmeans.fit_predict(x)

#cisualising the clusters- on the first two columns
plt.scatter(x[y_kmeans==0 ,0],x[y_kmeans==0,1],
            s=100, c='red', label ='Iris-setosa')
plt.scatter(x[y_kmeans==1,0],x[y_kmeans==1,1],
            s=100, c='blue', label= 'Iris-versicolour')
plt.scatter(x[y_kmeans==2,0],x[y_kmeans==2,1],
            s=100, c='green', label= 'Iris-virginica')
#plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],
           s=100, c= 'yellow', label='Centroids')
plt.legend()

